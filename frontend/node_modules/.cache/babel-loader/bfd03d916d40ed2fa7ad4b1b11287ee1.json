{"ast":null,"code":"var _jsxFileName = \"/home/trip/Desktop/gitless/frontend/src/components/Task.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Container, ListGroup } from 'react-bootstrap';\nimport ButtonIcons from './ButtonIcons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n; // Task for PRIORITY LIST\n\nfunction Task(props) {\n  _s2();\n\n  const [newName, setNewName] = useState(props.name);\n  const [isEditing, setEditing] = useState(false);\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const wasEditing = usePrevious(isEditing);\n\n  function handleNameChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(newName);\n    setEditing(false);\n  }\n\n  const editingTemplate = /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form editTask\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"app\",\n      htmlFor: props.id,\n      children: \"Edit Task:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editLine listTask\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editFields\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: props.id,\n          name: \"name\",\n          className: \"todo-text inFields\",\n          type: \"text\",\n          value: newName,\n          onChange: handleNameChange,\n          ref: editFieldRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editBtns\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          className: \"buttonScheme todo-cancel\",\n          onClick: () => setEditing(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"buttonScheme\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n\n  const viewTemplate = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n    className: \"listTask\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"listGrid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"taskTitle listItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: props.id,\n          type: \"checkbox\",\n          defaultChecked: props.completed,\n          onChange: () => props.toggleTaskCompleted(props.id),\n          className: \"checkScheme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"todo-label\",\n          htmlFor: props.id,\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-group\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          className: \"btn taskCtrl priorityTaskView buttonScheme\",\n          onClick: () => setEditing(true),\n          ref: editButtonRef,\n          children: /*#__PURE__*/_jsxDEV(ButtonIcons, {\n            type: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          className: \"btn taskCtrl priorityTaskView buttonScheme taskDel\",\n          onClick: () => props.deleteTask(props.id),\n          children: /*#__PURE__*/_jsxDEV(ButtonIcons, {\n            type: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]); // Renders on conditional of editing or viewing\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: isEditing ? editingTemplate : viewTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Task, \"80wddQha5daNnhx3vS064dF1INA=\", false, function () {\n  return [usePrevious];\n});\n\n_c = Task;\n;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/home/trip/Desktop/gitless/frontend/src/components/Task.js"],"names":["React","useEffect","useRef","useState","Button","Container","ListGroup","ButtonIcons","usePrevious","value","ref","current","Task","props","newName","setNewName","name","isEditing","setEditing","editFieldRef","editButtonRef","wasEditing","handleNameChange","e","target","handleSubmit","preventDefault","editTask","id","editingTemplate","viewTemplate","completed","toggleTaskCompleted","deleteTask","focus"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Container, ListGroup } from 'react-bootstrap';\nimport ButtonIcons from './ButtonIcons';\n\nfunction usePrevious(value) \n{\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n};\n\n// Task for PRIORITY LIST\nfunction Task(props)\n{\n\n    const [newName, setNewName] = useState(props.name);\n    const [isEditing, setEditing] = useState(false);\n\n    const editFieldRef = useRef(null);\n    const editButtonRef = useRef(null);\n    const wasEditing = usePrevious(isEditing);\n\n    function handleNameChange(e)\n    {\n        setNewName(e.target.value);\n    }\n\n    function handleSubmit(e)\n    {\n        e.preventDefault();\n        props.editTask(props.id, newName);\n\n        setNewName(newName);\n        setEditing(false);\n    }\n\n\n    const editingTemplate = (\n        \n        <form className=\"form editTask\" onSubmit={handleSubmit}>\n            <label className=\"app\" htmlFor={props.id}>\n                Edit Task:\n            </label>\n                <div className=\"editLine listTask\">\n                    <div className=\"editFields\">\n                        <input \n                            id={props.id} \n                            name=\"name\" \n                            className=\"todo-text inFields\" \n                            type=\"text\"\n                            value={newName}\n                            onChange={handleNameChange} \n                            ref={editFieldRef}\n                        />\n                    </div>\n                \n                    <div className=\"editBtns\">\n                        <Button \n                            type=\"button\" \n                            className=\"buttonScheme todo-cancel\" \n                            onClick=\n                            {\n                                () => setEditing(false)\n                            }\n                        >\n                            Cancel\n                        </Button>\n                        <Button type=\"submit\" className=\"buttonScheme\">\n                            Save\n                        </Button>\n                    </div>\n                </div>\n        </form>\n    );\n\n    const viewTemplate = (\n        <ListGroup.Item className=\"listTask\">\n            <Container className=\"listGrid\">\n                <div className=\"taskTitle listItem\">\n                    <input\n                        id={props.id}\n                        type=\"checkbox\"\n                        defaultChecked={props.completed}\n                        onChange=\n                        {\n                            () => props.toggleTaskCompleted(props.id)\n                        }\n                        className=\"checkScheme\"\n                    />\n                    <label className=\"todo-label\" htmlFor={props.id}>\n                        {props.name}\n                    </label>\n                </div>\n                <div className=\"btn-group\">\n                    <Button \n                        type=\"button\" \n                        className=\"btn taskCtrl priorityTaskView buttonScheme\" \n                        onClick=\n                        {\n                            () => setEditing(true) \n                        } \n                        ref={editButtonRef}\n                    >\n                        <ButtonIcons type={\"Edit\"}/>\n                    </Button>\n\n                    <Button\n                        type=\"button\"\n                        className=\"btn taskCtrl priorityTaskView buttonScheme taskDel\"\n                        onClick={\n                            () => props.deleteTask(props.id)\n                        }\n                    >\n                        <ButtonIcons type={\"Delete\"}/>\n                    </Button>\n                </div>\n            </Container>\n        </ListGroup.Item>\n      );\n\n      useEffect(() => \n      {\n        if (!wasEditing && isEditing) \n        {\n          editFieldRef.current.focus();\n        }\n        if (wasEditing && !isEditing) \n        {\n          editButtonRef.current.focus();\n        }\n      }, [wasEditing, isEditing]);\n\n    // Renders on conditional of editing or viewing\n    return(\n        <div className=\"todo\">\n            {isEditing ? editingTemplate : viewTemplate}\n        </div>\n    );\n};\n\nexport default Task;"]},"metadata":{},"sourceType":"module"}